import { BskyAgent } from '@atproto/api';
import * as dotenv from 'dotenv';
import yahooFinance from 'yahoo-finance2';
import * as process from 'process';
import { CronJob } from 'cron';
import dayjs from 'dayjs';

dotenv.config();

const BLUESKY_USERNAME = process.env.BLUESKY_USERNAME;
const BLUESKY_PASSWORD = process.env.BLUESKY_PASSWORD;

// Cria um agente do Bluesky
const agent = new BskyAgent({
  service: 'https://bsky.social/xrpc/com.atproto.server.createSession',
});

async function fetchExchangeRates() {
  try {
    // Busca as taxas de cÃ¢mbio do Yahoo Finance
    const usdToCny = await yahooFinance.quote('USDCNY=X');
    
    // A taxa de cÃ¢mbio estÃ¡ no campo `regularMarketPrice`
    console.log('Taxa de cÃ¢mbio USD/CNY:', usdToCny.regularMarketPrice);
    
    return {
      USD: 1, // USD Ã© sempre 1, jÃ¡ que estamos comparando com CNY
      CNY: usdToCny.regularMarketPrice, // Taxa de cÃ¢mbio atual de CNY
      previousClose: usdToCny.regularMarketPreviousClose // PreÃ§o de fechamento anterior
    };
  } catch (error) {
    console.error('Erro ao buscar as taxas de cÃ¢mbio no Yahoo Finance:', error);
    throw error;
  }
}

function calculateMetrics(currentRate: number, previousRate: number) {
  // ValorizaÃ§Ã£o Percentual
  const growthPercentage = ((currentRate - previousRate) / previousRate) * 100;
  
  return {
    growthPercentage: growthPercentage.toFixed(2),
    currentRate,
    previousRate
  };
}

async function postToBluesky(message: string) {
  try {
    await agent.login({
      identifier: BLUESKY_USERNAME || '',
      password: BLUESKY_PASSWORD || '',
    });
    console.log('Logado no Bluesky');

    await agent.post({ text: message });
    console.log('Publicado no Bluesky');
  } catch (error) {
    console.error('Erro ao publicar no Bluesky:', error);
    throw error;
  }
}

async function main() {
  console.log('Executando a funÃ§Ã£o principal...', new Date());
  try {
    // Busca as taxas de cÃ¢mbio atuais e anteriores
    const rates = await fetchExchangeRates();
    const usdRate = rates.USD;
    const cnyRate = rates.CNY!;
    const previousCloseRate = rates.previousClose!;

    // Calcula as mÃ©tricas
    const { growthPercentage } = calculateMetrics(cnyRate, previousCloseRate);

    // Monta a mensagem de acordo com as mÃ©tricas
    const message =
      parseFloat(growthPercentage) > 0
      ? `
      ğŸš€ O Yuan teve uma valorizaÃ§Ã£o impressionante de ${growthPercentage}% 
      em comparaÃ§Ã£o ao fechamento anterior! ğŸ’¹ğŸ“ˆ

      ğŸ‡¨ğŸ‡³ CNY Atual: ${cnyRate}
      ğŸ‡ºğŸ‡¸ Fechamento Anterior (USD/CNY): ${previousCloseRate}

      ğŸ“… ${dayjs().format('DD/MM/YYYY')} Ã s ${dayjs().format('HH:mm')}
      `
      : `
      ğŸ“‰ O Yuan teve uma desvalorizaÃ§Ã£o de ${growthPercentage}% 
      em comparaÃ§Ã£o ao fechamento anterior. ğŸ“‰

      ğŸ‡¨ğŸ‡³ CNY Atual: ${cnyRate}
      ğŸ‡ºğŸ‡¸ Fechamento Anterior (USD/CNY): ${previousCloseRate}

      ğŸ“… ${dayjs().format('DD/MM/YYYY')} Ã s ${dayjs().format('HH:mm')}
      `;

    // Publica o resultado
    console.log({ message });
    await postToBluesky(message);
  } catch (error) {
    console.error('Erro na funÃ§Ã£o principal:', error);
  }
  console.log('FunÃ§Ã£o principal concluÃ­da.', new Date());
}

// Define a execuÃ§Ã£o em um job cron
const scheduleExpression = '0 * * * *'; // Executa de hora em hora
const job = new CronJob(scheduleExpression, main);

job.start();
